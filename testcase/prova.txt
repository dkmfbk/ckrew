supEx("B", "hasModule", "mB", "g").
subRole("att1", "hasAttribute", "g").
insta("m1", "Module", "g").
insta("c2", "Context", "g").
triplea("c2", "hasModule", "m2", "g").
subClass("D", "C", "g").
domain("hasModule", "Context", "g").
domain("hasAttribute", "Context", "g").
insta("m2", "Module", "g").
triplea("c1", "hasModule", "m1", "g").
insta("attv1", "AttributeValue", "g").
insta("mB", "Module", "g").
range("hasAttribute", "AttributeValue", "g").
insta("strict", "AxiomType", "g").
subClass("B", "Context", "g").
range("hasModule", "Module", "g").
supEx("B", "att1", "attv1", "g").
insta("c1", "Context", "g").
insta("defeasible", "AxiomType", "g").
insta("c2", "B", "g").
nom("m1", "g").
nom("c2", "g").
nom("c1", "g").
nom("mB", "g").
nom("strict", "g").
nom("attv1", "g").
nom("defeasible", "g").
nom("m2", "g").
rol("hasModule", "g").
rol("hasAttribute", "g").
rol("att1", "g").
cls("AxiomType", "g").
cls("AttributeValue", "g").
cls("C", "g").
cls("D", "g").
cls("Module", "g").
cls("B", "g").
cls("Context", "g").
instd(X, Z, C) :- insta(X, Z, C).
-instd(X, Z, C) :- -insta(X, Z, C).
tripled(X, R, Y, C) :- triplea(X, R, Y, C).
-tripled(X, R, Y, C) :- -triplea(X, R, Y, C).
eq(X, X, C) :- nom(X, C).
eq(Y, X, C) :- eq(X, Y, C).
instd(Y, Z, C) :- eq(X, Y, C), instd(X, Z, C).
-instd(Y, Z, C) :- eq(X, Y, C), -instd(X, Z, C).
tripled(Y, U, Z, C) :- eq(X, Y, C), tripled(X, U, Z, C).
-tripled(Y, U, Z, C) :- eq(X, Y, C), -tripled(X, U, Z, C).
tripled(Z, U, Y, C) :- eq(X, Y, C), tripled(Z, U, X, C).
-tripled(Z, U, Y, C) :- eq(X, Y, C), -tripled(Z, U, X, C).
eq(X, Z, C) :- eq(X, Y, C), eq(Y, Z, C).
instd(X, "top", C) :- instd(X, Z, C).
instd(X, Z, C) :- subClass(Y, Z, C), instd(X, Y, C).
-instd(X, Z, C) :- supNot(Y, Z, C), instd(X, Y, C).
instd(X, Z, C) :- subConj(Y1, Y2, Z, C), instd(X, Y1, C), instd(X, Y2, C).
instd(X, Z, C) :- subEx(V, Y, Z, C), tripled(X, V, XP, C), instd(XP, Y, C).
tripled(X, R, X1, C) :- supEx(Y, R, X1, C), instd(X, Y, C).
instd(Y, Z1, C) :- supForall(Z, R, Z1, C), instd(X, Z, C), tripled(X, R, Y, C).
eq(X1, X2, C) :- supLeqOne(Z, R, Z1, C), instd(X, Z, C), tripled(X, R, X1, C), instd(X1, Z1, C), tripled(X, R, X2, C), instd(X2, Z1, C).
tripled(X, W, X1, C) :- subRole(V, W, C), tripled(X, V, X1, C).
tripled(X, W, Z, C) :- subRChain(U, V, W, C), tripled(X, U, Y, C), tripled(Y, V, Z, C).
-tripled(X, V, Y, C) :- dis(U, V, C), tripled(X, U, Y, C).
-tripled(X, U, Y, C) :- dis(U, V, C), tripled(X, V, Y, C).
tripled(Y, V, X, C) :- inv(U, V, C), tripled(X, U, Y, C).
tripled(Y, U, X, C) :- inv(U, V, C), tripled(X, V, Y, C).
-tripled(X, U, X, C) :- irr(U, C), nom(X, C).
insta("i_eq1", "C_4", "c1").
supLeqOne("C_leq", "R_leq", "C_4", "c1").
triplea("i_eq1", "R_1", "i_eq3", "c1").
insta("i_all1", "C_all", "c1").
triplea("i_eq3", "R_1", "i_eq1", "c1").
insta("i_2", "C_2", "c1").
subRole("R_2", "R_1", "c1").
domain("hasAttribute", "Context", "c1").
insta("i_4", "C_4", "c1").
subClass("C_1", "D", "c1").
subEx("R_1", "C_4", "D", "c1").
triplea("i_inv1", "R_inv1", "i_inv2", "c1").
insta("strict", "AxiomType", "c1").
triplea("i_6", "R_4", "i_7", "c1").
subRole("R_ev", "R_6", "c1").
subEvalR("R_5", "B", "R_6", "c1").
range("hasModule", "Module", "c1").
insta("i_1", "C_1", "c1").
supForall("C_all", "R_all", "C_4", "c1").
supNot("C_not", "C_4", "c1").
-eq("i_neq4", "i_neq5", "c1").
insta("i_ex2", "C_ex2", "c1").
eq("i_eq1", "i_eq2", "c1").
subEval("D", "B", "D", "c1").
subClass("C_ev1", "D", "c1").
triplea("i_all1", "R_all", "i_all2", "c1").
triplea("i_leq", "R_leq", "i_leq2", "c1").
insta("i_leq2", "C_4", "c1").
inv("R_inv2", "R_inv1", "c1").
insta("i_leq1", "C_4", "c1").
-triplea("i_npa1", "R_npa", "i_npa2", "c1").
triplea("i_3", "R_1", "i_4", "c1").
insta("i_not", "C_not", "c1").
triplea("i_dis1", "R_dis1", "i_dis2", "c1").
domain("hasModule", "Context", "c1").
subRChain("R_3", "R_4", "R_1", "c1").
eq("i_eq4", "i_eq5", "c1").
supEx("C_ex2", "R_ex", "obj_ex", "c1").
triplea("i_4", "R_2", "i_3", "c1").
eq("i_eq5", "i_eq6", "c1").
insta("i_2", "C_3", "c1").
dis("R_dis1", "R_dis2", "c1").
triplea("i_leq", "R_leq", "i_leq1", "c1").
range("hasAttribute", "AttributeValue", "c1").
insta("i_leq", "C_leq", "c1").
insta("defeasible", "AxiomType", "c1").
subConj("C_2", "C_3", "D", "c1").
irr("R_irr", "c1").
triplea("i_5", "R_3", "i_6", "c1").
nom("obj_ex", "c1").
nom("strict", "c1").
nom("i_neq5", "c1").
nom("i_neq4", "c1").
nom("i_inv2", "c1").
nom("i_inv1", "c1").
nom("defeasible", "c1").
nom("i_leq", "c1").
nom("i_all1", "c1").
nom("i_leq2", "c1").
nom("i_dis2", "c1").
nom("i_not", "c1").
nom("i_all2", "c1").
nom("i_leq1", "c1").
nom("i_dis1", "c1").
nom("i_5", "c1").
nom("i_6", "c1").
nom("i_3", "c1").
nom("i_4", "c1").
nom("i_7", "c1").
nom("i_ex2", "c1").
nom("i_eq3", "c1").
nom("i_eq4", "c1").
nom("i_eq5", "c1").
nom("i_eq6", "c1").
nom("i_eq1", "c1").
nom("i_eq2", "c1").
nom("i_npa2", "c1").
nom("i_npa1", "c1").
nom("i_2", "c1").
nom("i_1", "c1").
rol("R_npa", "c1").
rol("R_4", "c1").
rol("R_ex", "c1").
rol("R_6", "c1").
rol("hasModule", "c1").
rol("hasAttribute", "c1").
rol("R_ev", "c1").
rol("R_inv2", "c1").
rol("R_inv1", "c1").
rol("R_all", "c1").
rol("R_2", "c1").
rol("R_3", "c1").
rol("R_1", "c1").
rol("R_irr", "c1").
rol("R_dis2", "c1").
rol("R_leq", "c1").
rol("R_dis1", "c1").
cls("C_not", "c1").
cls("C_ex2", "c1").
cls("C_4", "c1").
cls("C_3", "c1").
cls("C_leq", "c1").
cls("AttributeValue", "c1").
cls("D", "c1").
cls("Module", "c1").
cls("C_2", "c1").
cls("C_1", "c1").
cls("AxiomType", "c1").
cls("C_all", "c1").
cls("C_ev1", "c1").
cls("Context", "c1").
prec("c1", "g").
prec("c2", "g").
instd(X, B, C) :- subEval(A, C1, B, C), instd(CP, C1, G), instd(X, A, CP).
tripled(X, T, Y, C) :- subEvalR(R, C1, T, C), instd(CP, C1, G), tripled(X, R, Y, CP).
eq(X, Y, C) :- nom(X, C), eq(X, Y, C1).
instd(X, Z, C) :- insta(X, Z, G), prec(C, G), not ovrInsta(X, Z, C).
tripled(X, R, Y, C) :- triplea(X, R, Y, G), prec(C, G), not ovrTriplea(X, R, Y, C).
-tripled(X, R, Y, C) :- -triplea(X, R, Y, G), prec(C, G), not ovrNTriplea(X, R, Y, C).
instd(X, Z, C) :- subClass(Y, Z, G), instd(X, Y, C), prec(C, G), not ovrSubClass(X, Y, Z, C).
-instd(X, Z, C) :- supNot(Y, Z, G), instd(X, Y, C), prec(C, G), not ovrSupNot(X, Y, Z, C).
instd(X, Z, C) :- subConj(Y1, Y2, Z, G), instd(X, Y1, C), instd(X, Y2, C), prec(C, G), not ovrSubConj(X, Y1, Y2, Z, C).
instd(X, Z, C) :- subEx(V, Y, Z, G), tripled(X, V, X1, C), instd(X1, Y, C), prec(C, G), not ovrSubEx(X, V, Y, Z, C).
tripled(X, R, X1, C) :- supEx(Y, R, X1, G), instd(X, Y, C), prec(C, G), not ovrSupEx(X, Y, R, X1, C).
instd(Y, Z1, C) :- supForall(Z, R, Z1, G), instd(X, Z, C), tripled(X, R, Y, C), prec(C, G), not ovrSupAll(X, Y, Z, R, Z1, C).
eq(X1, X2, C) :- supLeqOne(Z, R, Z1, G), instd(X, Z, C), tripled(X, R, X1, C), instd(X1, Z1, C), tripled(X, R, X2, C), instd(X2, Z1, C), prec(C, G), not ovrSupLeqOne(X, X1, X2, Z, R, Z1, C).
tripled(X, W, X1, C) :- subRole(V, W, G), tripled(X, V, X1, C), prec(C, G), not ovrSubRole(X, X1, V, W, C).
tripled(X, W, Z, C) :- subRChain(U, V, W, G), tripled(X, U, Y, C), tripled(Y, V, Z, C), prec(C, G), not ovrSubRChain(X, Y, Z, U, V, W, C).
-tripled(X, V, Y, C) :- dis(U, V, G), tripled(X, U, Y, C), prec(C, G), not ovrDis(X, Y, U, V, C).
-tripled(X, U, Y, C) :- dis(U, V, G), tripled(X, V, Y, C), prec(C, G), not ovrDis(X, Y, U, V, C).
tripled(Y, V, X, C) :- inv(U, V, G), tripled(X, U, Y, C), prec(C, G), not ovrInv(X, Y, U, V, C).
tripled(Y, U, X, C) :- inv(U, V, G), tripled(X, V, Y, C), prec(C, G), not ovrInv(X, Y, U, V, C).
-tripled(X, U, X, C) :- irr(U, G), nom(X, C), prec(C, G), not ovrIrr(X, U, C).
